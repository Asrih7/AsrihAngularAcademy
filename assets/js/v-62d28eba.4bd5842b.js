"use strict";(self.webpackChunkangular_training_platform=self.webpackChunkangular_training_platform||[]).push([[7465],{7206:(e,n,s)=>{s.r(n),s.d(n,{default:()=>p});var a=s(6252),o=s(9763);const t=s.p+"assets/img/devtools-component-tree.5c82001a.png",r=s.p+"assets/img/devtools-component-source.c81d81ee.png",l=s.p+"assets/img/vscode-breakpoint.7fb26c3d.png",i={},p=(0,s(3744).Z)(i,[["ssrRender",(...e)=>(e[2].appContext.provides[a.Uc]._registeredComponents.add("C:\\Users\\soufasri\\OneDrive - NTT DATA EMEAL\\Desktop\\AsrihAngularAcademy\\docs\\node_modules\\@vuepress\\bundler-webpack\\dist\\vuepress-loader.cjs!C:\\Users\\soufasri\\OneDrive - NTT DATA EMEAL\\Desktop\\AsrihAngularAcademy\\docs\\node_modules\\vue-loader\\dist\\index.js??ruleSet[0].use[1]!C:\\Users\\soufasri\\OneDrive - NTT DATA EMEAL\\Desktop\\AsrihAngularAcademy\\docs\\src\\.vuepress\\.temp\\pages\\debugging\\index.html.vue"),function(e,n,s,i){const p=(0,a.up)("ExternalLinkIcon");n(`<div${(0,o.fq)(i)}><h1 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h1><h4 id="debug-with-your-browser-s-developer-tools" tabindex="-1"><a class="header-anchor" href="#debug-with-your-browser-s-developer-tools" aria-hidden="true">#</a> Debug with your browser&#39;s Developer Tools</h4><p>The Developer Tools can be invoked by pressing F12 on your keyboard and offer a panel of features such as a JS console, network request traces and so on.</p><p>The <em>Sources</em> tab of the Developer Tools enable you to open any source file by name (Ctrl + P) as long as you are not in a production build where files are minified. This is where you can place breakpoints.</p><p>Alternatively, Angular provides a browser extension for Chrome called <a href="https://angular.io/guide/devtools" target="_blank" rel="noopener noreferrer">Angular DevTools`),n((0,o.FG)(p,null,null,s)),n(`</a>. It adds Angular specific debugging and profiling capabilities. The following screenshot illustrates the component tree feature of Angular DevTools. When the developer clicks on the &quot;&lt;&gt;&quot; button surrounded in red, he gets access to the source code of the component where he can place breakpoints.</p><p><img${(0,o.x$)("src",t)} alt="Angular DevTools component tree"></p><p><img${(0,o.x$)("src",r)} alt="Component source in Chrome DevTools"></p><h4 id="debug-with-vscode-only-for-locally-served-application" tabindex="-1"><a class="header-anchor" href="#debug-with-vscode-only-for-locally-served-application" aria-hidden="true">#</a> Debug with VSCode (only for locally served application)</h4><p>VSCode allows you to natively debug your development application on Chrome or Edge. To do that, you first need to create a launch configuration for debugging. VSCode can create such a file automatically by following these steps:</p><ul><li>Press <em>F5</em> on your keyboard or clic on <em>create a launch.json file</em> in the debug panel (left sidebar).</li><li>After a quick scan of the projet, VSCode will suggest relevent debug configurations. Choose <em>Chrome</em>.</li><li>A new file located in <em>.vscode/launch.json</em> will be created.</li><li>Open that file and change the port from the default value to the one used by the development server (4200 is the common value).</li></ul><p>Here is a sample <em>.vscode/launch.json</em>:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pwa-chrome&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Launch Chrome against localhost&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:4200&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;webRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you have a launch configuration and a running development server, press <em>F5</em>. This will open your app in a new browser window and enable debugging features in VSCode. To verify that, please add a breakpoint in the app component and launch a debug session. The debugger should break on your breakpoint.</p><p><img${(0,o.x$)("src",l)} alt="debug vscode"></p></div>`)}(...e))]])},7537:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a=JSON.parse('{"key":"v-62d28eba","path":"/debugging/","title":"Debugging","lang":"en-US","frontmatter":{},"headers":[],"git":{},"filePathRelative":"debugging/README.md"}')}}]);