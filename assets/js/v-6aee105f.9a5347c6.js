"use strict";(self.webpackChunkangular_training_platform=self.webpackChunkangular_training_platform||[]).push([[9148],{5326:(s,n,a)=>{a.r(n),a.d(n,{default:()=>r});var e=a(9763),t=a(6252);const o={},r=(0,a(3744).Z)(o,[["ssrRender",(...s)=>(s[2].appContext.provides[t.Uc]._registeredComponents.add("C:\\Users\\soufasri\\OneDrive - NTT DATA EMEAL\\Desktop\\AsrihAngularAcademy\\docs\\node_modules\\@vuepress\\bundler-webpack\\dist\\vuepress-loader.cjs!C:\\Users\\soufasri\\OneDrive - NTT DATA EMEAL\\Desktop\\AsrihAngularAcademy\\docs\\node_modules\\vue-loader\\dist\\index.js??ruleSet[0].use[1]!C:\\Users\\soufasri\\OneDrive - NTT DATA EMEAL\\Desktop\\AsrihAngularAcademy\\docs\\src\\.vuepress\\.temp\\pages\\observables-in-angular\\index.html.vue"),function(s,n,a,t){n(`<div${(0,e.fq)(t)}><h1 id="observables-in-angular" tabindex="-1"><a class="header-anchor" href="#observables-in-angular" aria-hidden="true">#</a> Observables in Angular</h1><p>An observable is a class that can be used to handle asynchronous data streams. Observables are used to handle data that can arrive over time, such as data received from a server, user input, or timed events.</p><h3 id="creating-observables" tabindex="-1"><a class="header-anchor" href="#creating-observables" aria-hidden="true">#</a> Creating Observables</h3><p>There are several ways to create observables in Angular:</p><p><em><strong>Using the Observable Constructor</strong></em>: You can create an observable using the <code>Observable</code> constructor and the <code>new</code> keyword. The constructor takes a function as an argument, which is called when the observable is subscribed to.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>Using the <code>of</code> Operator</strong></em>: You can create an observable from a list of values using the <code>of</code> operator. The <code>of</code> operator emits each value in the list in sequence.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">of</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>Using the <code>from</code> Operator</strong></em>: You can create an observable from an array, promise, or iterable using the <code>from</code> operator. The <code>from</code> operator emits each item in the array, promise, or iterable in sequence.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> from <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="subscribing-to-observables" tabindex="-1"><a class="header-anchor" href="#subscribing-to-observables" aria-hidden="true">#</a> Subscribing to Observables</h3><p>To receive data from an observable, you need to subscribe to it. The <code>subscribe</code> method is used to subscribe to an observable and receive data emitted by the observable.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Complete&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="difference-between-observables-and-promises-in-angular" tabindex="-1"><a class="header-anchor" href="#difference-between-observables-and-promises-in-angular" aria-hidden="true">#</a> Difference between <code>observables</code> and <code>promises</code> in Angular</h3><ul><li><p><strong>Observables</strong>:</p><ul><li>Observables are lazy, meaning they only execute when subscribed to.</li><li>Observables can emit multiple values over time.</li><li>Observables can be canceled using the <code>unsubscribe</code> method.</li><li>Observables can be transformed and combined using operators.</li><li>Observables are used for handling streams of data, such as user input, server responses, and events.</li></ul></li><li><p><strong>Promises</strong>:</p><ul><li>Promises are eager, meaning they execute immediately when created.</li><li>Promises can only emit a single value.</li><li>Promises cannot be canceled once created.</li><li>Promises do not have built-in transformation or combination methods.</li><li>Promises are used for handling asynchronous operations that produce a single result, such as HTTP requests and file reads.</li></ul></li></ul></div>`)}(...s))]])},680:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e=JSON.parse('{"key":"v-6aee105f","path":"/observables-in-angular/","title":"Observables in Angular","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Creating Observables","slug":"creating-observables","link":"#creating-observables","children":[]},{"level":3,"title":"Subscribing to Observables","slug":"subscribing-to-observables","link":"#subscribing-to-observables","children":[]},{"level":3,"title":"Difference between observables and promises in Angular","slug":"difference-between-observables-and-promises-in-angular","link":"#difference-between-observables-and-promises-in-angular","children":[]}],"git":{},"filePathRelative":"observables-in-angular/README.md"}')}}]);